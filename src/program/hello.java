package program;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.net.ServerSocket;
import java.net.Socket;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static java.lang.System.out;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jsmpp.bean.DeliveryReceipt;
import org.jsmpp.util.DeliveryReceiptState;

import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;

import ch.ethz.ssh2.Session;
import ch.ethz.ssh2.StreamGobbler;

public class hello {
	private static String msg;
	static IJatool tool =new Jatool();
	static Logger logger;
	


	hello() throws IOException{
		out.println(this.getClass().getResource(""));
		out.println(Thread.currentThread().getContextClassLoader().getResource(""));
		out.println(this.getClass().getClassLoader().getResource("").getPath());
	}
	
	public static void main(String[] args) throws Exception{
		
		Properties prop = getProperties();
		PropertyConfigurator.configure(prop);
		logger =Logger.getLogger(hello.class);
		logger.info("Logger Load Success!");
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Class.forName("com.mysql.jdbc.Driver");
		
		
		String vlr = "12085978751";
		String v = "12085";
		out.println(vlr.matches("^"+v));
		
		/*Calendar cal = Calendar.getInstance();
		int week = cal.get(Calendar.DAY_OF_WEEK);
		
		out.println(week+" : "+new Date(cal.getTimeInMillis()));
		
		//readExcelMailContent("C:/Users/ranger.kao/Desktop/2016-s2tservice.xls");

		List<Map<String, String>> head = new ArrayList<Map<String, String>>();
		List<Map<String, Object>> data = new ArrayList<Map<String, Object>>();
		
		Map<String, String> m = null;
		
		m= new HashMap<String, String>();
		m.put("col", "serviceid");
		m.put("name", "SERVICE ID");
		head.add(m);
		
		m= new HashMap<String, String>();
		m.put("col", "imsi");
		m.put("name", "IMSI");
		head.add(m);
		
		m= new HashMap<String, String>();
		m.put("col", "start");
		m.put("name", "Start time");
		head.add(m);
		
		m= new HashMap<String, String>();
		m.put("col", "end");
		m.put("name", "End time");
		head.add(m);
		
		String imsi = null;
	
		Map<String, Object> m2 = null;
		
		String sql = ""
				+ "select A.IMSI,A.SERVICEID,A.START_TIME,NVL(A.END_TIME,B.END_TIME) END_TIME "
				+ "from(	Select A.IMSI,A.SERVICEID,to_char(A.START_TIME,'yyyyMMddhh24miss') START_TIME, to_char( min(B.END_TIME),'yyyyMMddhh24miss') END_TIME "
				//+ "to_char(B.END_TIME,'yyyyMMddhh24miss') END_TIME "
				+ "			from (	select IMSI,START_TIME,SERVICEID  "
				+ "						from (	select A.NEWVALUE IMSI,A.COMPLETEDATE START_TIME,B.SERVICEID  "
				+ "									from SERVICEINFOCHANGEORDER A, SERVICEORDER B "
				+ "									WHERE A.FIELDID=3713 and A.COMPLETEDATE is not null AND A.ORDERID=B.ORDERID  "
				+ "									UNION ALL  "
				+ "									select A.FIELDVALUE IMSI,A.COMPLETEDATE START_TIME,A.SERVICEID  "
				+ "									from NEWSERVICEORDERINFO A "
				+ "									WHERE a.fieldid=3713 and A.COMPLETEDATE is not null "
				+ "								) "
				+ "						WHERE IMSI in ({{imsi}}) "
				+ "					) A,  "
				+ "					(	select A.OLDVALUE IMSI,A.COMPLETEDATE END_TIME,B.SERVICEID "
				+ "						from SERVICEINFOCHANGEORDER A, SERVICEORDER B "
				+ "						WHERE A.FIELDID=3713 and A.COMPLETEDATE is not null AND A.ORDERID=B.ORDERID AND OLDVALUE in ({{imsi}}) "
				+ "					) B "
				+ "			WHERE A.IMSI = B.IMSI(+) AND A.SERVICEID = B.SERVICEID(+) AND A.START_TIME<B.END_TIME(+) "
				+ "			GROUP BY A.IMSI,A.SERVICEID,A.START_TIME "
				+ "		) A ,"
				+ "		(	select serviceid,to_char(datecanceled,'yyyyMMddhh24miss')  END_TIME "
				+ "			from service "
				+ "			where datecanceled is not null "
				+ "		) B "
				+ "where A.serviceid = B.serviceid(+) ";
		
		Connection cc = null;
		Statement st = null;
		ResultSet rs = null;
		
		imsi = "'454120260244848'";

		logger.info("SQL:"+sql.replaceAll("\\{\\{imsi\\}\\}", imsi));
		cc = new hello().getConnection();
		st = cc.createStatement();
		rs = st.executeQuery(sql.replaceAll("\\{\\{imsi\\}\\}", imsi));
		
		while(rs.next()){
			m2= new HashMap<String, Object>();
			m2.put("serviceid",  rs.getString("SERVICEID"));
			m2.put("imsi", rs.getString("IMSI"));
			m2.put("start", rs.getString("START_TIME"));
			m2.put("end", rs.getString("END_TIME"));
			data.add(m2);
		}
		
		if(cc!=null) cc.close();
		cc = null;
		if(st!=null) st.close();
		st=null;
		if(rs!=null)rs.close();
		rs=null;*/
		
/*		imsi =  "'454120260201102','454120260201227','454120260201521','454120260202652','454120260202687','454120260203261','454120260203289','454120260203276','454120260203393','454120260203373','454120260203357','454120260203441','454120260205436','454120260206279','454120260207416','454120260208379','454120260208409','454120260208423','454120260208496','454120260208713','454120260209600','454120260209642','454120260210036','454120260210786','454120260211501','454120260211557','454120260212183','454120260212223','454120260214948','454120260215755','454120260215757','454120260216357','454120260216380','454120260217179','454120260217797','454120260218659','454120260218681','454120260220071','454120260220076','454120260221144','454120260221253','454120260221446','454120260221452','454120260222197','454120260222287','454120260223068','454120260223721','454120260223799','454120260223809','454120260223841','454120260223878','454120260225852','454120260225900','454120260225955','454120260227904','454120260227808','454120260227811','454120260227184','454120260227043','454120260227052','454120260228810','454120260228814','454120260228848','454120260228955','454120260228933','454120260229255','454120260229266','454120260229532','454120260230427','454120260230492','454120260230479','454120260230483','454120260230537','454120260230710','454120260230720','454120260231467','454120260231484','454120260231445','454120260231504','454120260231545','454120260231546','454120260231517','454120260231603','454120260232599','454120260232626','454120260232577','454120260232691','454120260232649','454120260232653','454120260232734','454120260232742','454120260232722','454120260233674','454120260233658','454120260233703','454120260233803','454120260233827','454120260233828','454120260233843','454120260233845','454120260233846','454120260233826','454120260234269','454120260234711','454120260234761','454120260234831','454120260234825','454120260234798','454120260234893','454120260234908','454120260234915','454120260234861','454120260235967','454120260236008','454120260235979','454120260235995','454120260236016','454120260236022','454120260236003','454120260236420','454120260236937','454120260236981','454120260237040','454120260237083','454120260237419','454120260237422','454120260237447','454120260237454','454120260237542','454120260238098','454120260238099','454120260238102','454120260238140','454120260238141','454120260238176','454120260238547','454120260238531','454120260238552','454120260238559','454120260238564','454120260238544','454120260238675','454120260238691','454120260239275','454120260239851','454120260239852','454120260239835','454120260239844','454120260239889','454120260239917','454120260239938','454120260239993','454120260240177','454120260240181','454120260240184','454120260240170','454120260240190','454120260240242','454120260240257','454120260240258','454120260240253','454120260240271','454120260240217','454120260240215','454120260240279','454120260240337','454120260240321','454120260240343','454120260240344','454120260240303','454120260240345','454120260240325','454120260240347','454120260240348','454120260240352','454120260240334','454120260240335','454120260240292','454120260240383','454120260240419','454120260240420','454120260240386','454120260240399','454120260240428','454120260241519','454120260241497','454120260241498','454120260241503','454120260241506','454120260241513','454120260241531','454120260241539','454120260241479','454120260241541','454120260241542','454120260241544','454120260241545','454120260241549','454120260241550','454120260241555','454120260241495','454120260241596','454120260241608','454120260241590','454120260241611','454120260241594','454120260241615','454120260241595','454120260241616','454120260241620','454120260241625','454120260241560','454120260241629','454120260241630','454120260241633','454120260241634','454120260241564','454120260241567','454120260241656','454120260241661','454120260241662','454120260241663','454120260241671','454120260241646','454120260241649','454120260241916','454120260241878','454120260241882','454120260241886','454120260241925','454120260241914','454120260241915','454120260241871','454120260241874','454120260242470','454120260242473','454120260242475','454120260242572','454120260242584','454120260242591','454120260242609','454120260242612','454120260242641','454120260242739','454120260243695','454120260243762','454120260243766','454120260243743','454120260243821','454120260243843','454120260243853','454120260243868','454120260243803','454120260243825','454120260243812','454120260243813','454120260243989','454120260244053','454120260244120','454120260244125','454120260244129','454120260244130','454120260244165','454120260244921','454120260244926','454120260245021','454120260245042','454120260245023','454120260245044','454120260245025','454120260245079','454120260245084','454120260245090','454120260245093','454120260245138','454120260245119','454120260245121','454120260245142','454120260245123','454120260245128','454120260245101','454120260245146','454120260245147','454120260245110','454120260245112','454120260245114','454120260245115','454120260245135','454120260245162','454120260245164','454120260245201','454120260245205','454120260245211','454120260245213','454120260245174','454120260245182','454120260245187','454120260245188','454120260245189','454120260245192','454120260245193','454120260245061','454120260245063','454120260245837','454120260245840','454120260245816','454120260245820','454120260245821','454120260245868','454120260245873','454120260245847','454120260245851','454120260245939','454120260245892','454120260245952','454120260245953','454120260245927','454120260245913','454120260245928','454120260245996','454120260245999','454120260246000','454120260245961','454120260246009','454120260246015','454120260246099','454120260246107','454120260246176','454120260246185','454120260246128','454120260246161','454120260246194','454120260246132','454120260246164','454120260246173','454120260246175','454120260246155','454120260246257','454120260246261','454120260246271','454120260246272','454120260246273','454120260246253','454120260246298','454120260246299','454120260246304','454120260246397','454120260246408','454120260246409','454120260246411','454120260246378','454120260246380','454120260246382','454120260246385','454120260246388','454120260246920','454120260246925','454120260246927','454120260246939','454120260246953','454120260247002','454120260246982','454120260246984','454120260247005','454120260246989','454120260246992','454120260247008','454120260246959','454120260246961','454120260246962','454120260246969','454120260247186','454120260247190','454120260247198','454120260247203','454120260247204','454120260247207','454120260247208','454120260247209','454120260247218','454120260247219','454120260247224','454120260247248','454120260247250','454120260247316','454120260247279','454120260247297','454120260247260','454120260247264','454120260247359','454120260247339','454120260247340','454120260247363','454120260247364','454120260247365','454120260247366','454120260247348','454120260247349','454120260247369','454120260247371','454120260247397','454120260247379','454120260247380','454120260247381','454120260247402','454120260247383','454120260247407','454120260247389','454120260247882','454120260247885','454120260248286','454120260248292','454120260248296','454120260249438','454120260249440','454120260249453','454120260250904','454120260250937','454120260250939','454120260250875','454120260250877','454120260250879','454120260250896','454120260250899','454120260250902','454120260251003','454120260251004','454120260251009','454120260250963','454120260251016','454120260251021','454120260250964','454120260250983','454120260251022','454120260250985','454120260250987','454120260250994','454120260250950','454120260250997','454120260250998','454120260250954','454120260250959','454120260251043','454120260251023','454120260251070','454120260251071','454120260250962','454120260251073','454120260251075','454120260251046','454120260251025','454120260251034','454120260251035','454120260251042','454120260251114','454120260251115','454120260251151','454120260251154','454120260251129','454120260251132','454120260251139','454120260251163','454120260251164','454120260251168','454120260251377','454120260251385','454120260251387','454120260251394','454120260251400','454120260251409','454120260251413','454120260251414','454120260251416','454120260251419','454120260251443','454120260251444','454120260251446','454120260251447','454120260251448','454120260251449','454120260251467','454120260251470','454120260251456','454120260251426','454120260251459','454120260251428','454120260251435','454120260251437','454120260251441','454120260251528','454120260251537','454120260251539','454120260251542','454120260251547','454120260251517','454120260251518','454120260251561','454120260252903','454120260252904','454120260252921','454120260252924','454120260252986','454120260252947','454120260253002','454120260252950','454120260252956','454120260252958','454120260252959','454120260252961','454120260253005','454120260252979','454120260252980','454120260253063','454120260253068','454120260253070','454120260253083','454120260253075','454120260253023','454120260253024','454120260253046','454120260253036','454120260253052','454120260253057','454120260253061','454120260253101','454120260253104','454120260253146','454120260253111','454120260253150','454120260253151','454120260253174','454120260253130','454120260253139','454120260253142','454120260253203','454120260253184','454120260253204','454120260253230','454120260253186','454120260253188','454120260253205','454120260253189','454120260253209','454120260253191','454120260253196','454120260253197','454120260253236','454120260253199','454120260253238','454120260253248','454120260253222','454120260253266','454120260253268','454120260253575','454120260253603','454120260253604','454120260253605','454120260253607','454120260253597','454120260253602','454120260253609','454120260253717','454120260254272','454120260254294','454120260254276','454120260254310','454120260254311','454120260254318','454120260254319','454120260254321','454120260254322','454120260254326','454120260254370','454120260254379','454120260254380','454120260254334','454120260254346','454120260254337','454120260254350','454120260254340','454120260254362','454120260254383','454120260254384','454120260254390','454120260254423','454120260254424','454120260254433','454120260254459','454120260254460','454120260254406','454120260254407','454120260254418','454120260254463','454120260254464','454120260254470','454120260254473','454120260254474','454120260255083','454120260255086','454120260255073','454120260255091','454120260255096','454120260255105','454120260255112','454120260255118','454120260255124','454120260255138','454120260255141','454120260255166','454120260255170','454120260255172','454120260255174','454120260255178','454120260255148','454120260255162','454120260255183','454120260255187','454120260255223','454120260255188','454120260255243','454120260255191','454120260255196','454120260255206','454120260255200','454120260255218','454120260255251','454120260255254','454120260255255','454120260255257','454120260255225','454120260255260','454120260255228','454120260255262','454120260255235','454120260255240','454120260255267','454120260255673','454120260255675','454120260255680','454120260255681','454120260255723','454120260255732','454120260255687','454120260255720','454120260255691','454120260255736','454120260255748','454120260255753','454120260255698','454120260255759','454120260255701','454120260255762','454120260255829','454120260255763','454120260255786','454120260255793','454120260255832','454120260255795','454120260255767','454120260255774','454120260255840','454120260255868','454120260255858','454120260256624','454120260256618','454120260256637','454120260256586','454120260256570','454120260256571','454120260256578','454120260256579','454120260256598','454120260256580','454120260256581','454120260256667','454120260256643','454120260256695','454120260256674','454120260256706','454120260256679','454120260256653','454120260256712','454120260256713','454120260256749','454120260256752','454120260256765','454120260256769','454120260256729','454120260256866','454120260256850','454120260256851','454120260256854','454120260257677','454120260257733','454120260257736','454120260257737','454120260257686','454120260257691','454120260257694','454120260257695','454120260257700','454120260257761','454120260257768','454120260257775','454120260257781','454120260257833','454120260257786','454120260257787','454120260257805','454120260257812','454120260257792','454120260257798','454120260257799','454120260257847','454120260257849','454120260257854','454120260257859','454120260258286','454120260258273','454120260258314','454120260258788','454120260258795','454120260258800','454120260258801','454120260258813','454120260258814','454120260258815','454120260258821','454120260258879','454120260258880','454120260258850','454120260258832','454120260258853','454120260258837','454120260258838','454120260258859','454120260258839','454120260258840','454120260258842','454120260258904','454120260258886','454120260258890','454120260258926','454120260258894','454120260258896','454120260258901','454120260258989','454120260258990','454120260258993','454120260259003','454120260258979','454120260258981','454120260259008','454120260259788','454120260259789','454120260259772','454120260259776','454120260259876','454120260259922','454120260259895','454120260259896','454120260259958','454120260259940','454120260259942','454120260259990','454120260259993','454120260260002','454120260259967','454120260259971','454120260259981','454120260260006','454120260260009','454120260260016','454120260260024','454120260260065','454120260260036','454120260260040','454120260260047','454120260260054','454120260260979','454120260261073','454120260261077','454120260261058','454120260261103','454120260261111','454120260261156','454120260261119','454120260261122','454120260261139','454120260261142','454120260261102','454120260261169','454120260262072','454120260262104','454120260262107','454120260262079','454120260262092','454120260262094','454120260262172','454120260262123','454120260262157','454120260262133','454120260262138','454120260262233','454120260262240','454120260262576','454120260262579','454120260262584','454120260262541','454120260262668','454120260262654','454120260262685','454120260262688','454120260262695','454120260262739','454120260262715','454120260262766','454120260263233','454120260263234','454120260263677','454120260263678','454120260263637','454120260263769','454120260263802','454120260264333','454120260264301','454120260264273','454120260264277','454120260264278','454120260264408','454120260264411','454120260264414','454120260264417','454120260264419','454120260264377','454120260264378','454120260264348','454120260264357','454120260264427','454120260264433','454120260264723','454120260264733','454120260264734','454120260264735','454120260264736','454120260264786','454120260264875','454120260264877','454120260264943','454120260265979','454120260265980','454120260266028','454120260266029','454120260266063','454120260266036','454120260266064','454120260266066','454120260266058','454120260266003','454120260266060','454120260266062','454120260266013','454120260266017','454120260266021','454120260266132','454120260266136','454120260266137','454120260266156','454120260266162','454120260266292','454120260266317','454120260266318','454120260266320','454120260266346','454120260266368','454120260266369','454120260266328','454120260266336','454120260266923','454120260266946','454120260266947','454120260266953','454120260266909','454120260266942','454120260267078','454120260267080','454120260267103','454120260267083','454120260267081','454120260267106','454120260267084','454120260267122','454120260267168','454120260267162','454120260267173','454120260267174','454120260267194','454120260267137','454120260267199','454120260267249','454120260267226','454120260267227','454120260267240','454120260267222','454120260267442','454120260267446','454120260267447','454120260267543','454120260267552','454120260267540','454120260268249','454120260268194','454120260268215','454120260268217','454120260268218','454120260268221','454120260268237','454120260268645','454120260268615','454120260268668','454120260268724','454120260268719','454120260268743','454120260269046','454120260269048','454120260269051','454120260269061','454120260269263','454120260269266','454120260269269','454120260269670','454120260269680','454120260269682','454120260269723','454120260269730','454120260269732','454120260269737','454120260269708','454120260269713','454120260269743','454120260269745','454120260269782','454120260269762','454120260269825','454120260269827','454120260269828','454120260269831','454120260269834','454120260269835','454120260269838','454120260269839','454120260269841','454120260269788','454120260269809','454120260269794','454120260269798','454120260269819','454120260270919','454120260270899','454120260270900','454120260270902','454120260270940','454120260270942','454120260271023','454120260271024','454120260275910','454120260275904','454120260275922','454120260275953','454120260275940','454120260276049','454120260276077','454120260276012','454120260276095','454120260276614','454120260276625','454120260276626','454120260276576','454120260276667','454120260276687','454120260276691','454120260276656','454120260276662','454120260276663','454120260276666','454120260276757','454120260276709','454120260276712','454120260276714','454120260276716','454120260277331','454120260277333','454120260277341','454120260277371','454120260277643','454120260277646','454120260278077','454120260278110','454120260278111','454120260278114'";

		logger.info("SQL:"+sql.replaceAll("\\{\\{imsi\\}\\}", imsi));
		cc = new hello().getConnection();
		st = cc.createStatement();
		rs = st.executeQuery(sql.replaceAll("\\{\\{imsi\\}\\}", imsi));
		
		while(rs.next()){
			m2= new HashMap<String, Object>();
			m2.put("serviceid",  rs.getString("SERVICEID"));
			m2.put("imsi", rs.getString("IMSI"));
			m2.put("start", rs.getString("START_TIME"));
			m2.put("end", rs.getString("END_TIME"));
			data.add(m2);
		}
		
		if(cc!=null) cc.close();
		cc = null;
		if(st!=null) st.close();
		st=null;
		if(rs!=null)rs.close();
		rs=null;*/
		
/*		imsi = "'454120260200930','454120260201566','454120260201568','454120260201569','454120260201570','454120260201616','454120260201704','454120260201978','454120260203041','454120260203219','454120260204142','454120260206138','454120260207645','454120260207646','454120260207852','454120260208201','454120260208378','454120260208977','454120260209927','454120260210627','454120260210667','454120260211041','454120260211692','454120260212868','454120260213405','454120260214376','454120260214473','454120260214497','454120260215466','454120260215598','454120260215650','454120260215999','454120260216636','454120260216757','454120260216943','454120260217988','454120260221942','454120260222091','454120260222714','454120260222997','454120260224003','454120260224951','454120260225024','454120260224999','454120260225040','454120260225055','454120260225588','454120260225553','454120260225559','454120260225751','454120260226212','454120260226315','454120260226391','454120260226392','454120260226358','454120260226503','454120260227687','454120260227689','454120260227696','454120260227678','454120260227590','454120260227466','454120260228104','454120260228584','454120260228654','454120260228768','454120260228773','454120260228799','454120260228803','454120260229333','454120260229452','454120260229512','454120260229501','454120260229728','454120260230580','454120260230623','454120260230924','454120260230926','454120260231214','454120260231226','454120260231312','454120260231256','454120260231391','454120260231394','454120260231341','454120260231380','454120260232086','454120260232113','454120260232106','454120260232146','454120260232834','454120260232853','454120260232803','454120260232931','454120260232897','454120260232899','454120260232968','454120260232969','454120260233410','454120260233417','454120260233472','454120260233484','454120260233487','454120260233555','454120260233564','454120260233566','454120260233546','454120260233576','454120260234216','454120260234225','454120260234231','454120260234937','454120260234938','454120260234961','454120260234989','454120260235110','454120260235134','454120260235166','454120260235618','454120260235762','454120260235720','454120260235782','454120260236284','454120260236360','454120260236409','454120260236459','454120260237123','454120260237134','454120260237135','454120260237138','454120260237173','454120260237202','454120260237820','454120260237930','454120260237987','454120260237996','454120260238348','454120260238349','454120260238338','454120260238373','454120260238382','454120260238384','454120260238431','454120260238410','454120260238443','454120260238423','454120260238478','454120260238495','454120260238501','454120260239128','454120260239452','454120260239460','454120260239479','454120260239497','454120260239498','454120260240042','454120260240059','454120260240067','454120260240022','454120260240026','454120260240035','454120260240378','454120260240379','454120260240381','454120260240370','454120260240371','454120260240375','454120260240456','454120260240464','454120260240466','454120260240478','454120260240483','454120260240484','454120260240489','454120260240511','454120260240490','454120260240442','454120260240446','454120260240447','454120260240559','454120260240581','454120260240564','454120260240565','454120260240590','454120260240591','454120260240572','454120260240594','454120260240536','454120260240521','454120260240533','454120260240535','454120260240537','454120260240546','454120260240602','454120260240649','454120260240664','454120260240665','454120260240625','454120260240653','454120260240655','454120260240633','454120260240605','454120260241177','454120260241188','454120260241210','454120260241171','454120260241221','454120260241224','454120260241226','454120260241237','454120260241239','454120260241240','454120260241245','454120260241704','454120260241707','454120260241695','454120260241736','454120260241779','454120260241717','454120260241739','454120260241783','454120260241788','454120260241746','454120260241789','454120260241792','454120260241719','454120260241761','454120260241725','454120260241766','454120260241732','454120260241818','454120260241892','454120260241895','454120260241898','454120260241906','454120260241908','454120260241909','454120260241865','454120260242397','454120260242415','454120260242381','454120260242388','454120260242392','454120260242393','454120260242394','454120260242421','454120260242423','454120260242426','454120260242434','454120260242441','454120260242443','454120260242447','454120260242449','454120260242453','454120260242466','454120260242510','454120260242512','454120260242513','454120260242533','454120260242563','454120260243090','454120260243094','454120260243102','454120260243104','454120260243108','454120260243165','454120260243166','454120260243175','454120260243265','454120260243453','454120260243917','454120260243944','454120260243886','454120260243934','454120260243893','454120260243956','454120260243977','454120260243978','454120260244039','454120260244570','454120260244597','454120260244607','454120260244674','454120260244641','454120260244626','454120260244719','454120260245626','454120260245635','454120260245657','454120260245681','454120260245660','454120260245684','454120260245686','454120260245697','454120260245670','454120260245702','454120260245641','454120260245644','454120260245651','454120260245693','454120260245759','454120260245762','454120260245717','454120260245718','454120260245721','454120260245790','454120260245793','454120260245728','454120260245737','454120260245739','454120260245740','454120260245742','454120260245745','454120260245798','454120260245800','454120260245806','454120260245808','454120260245809','454120260245811','454120260245814','454120260246339','454120260246340','454120260246322','454120260246341','454120260246331','454120260246349','454120260246421','454120260246426','454120260246428','454120260246429','454120260246359','454120260246476','454120260246477','454120260246479','454120260246481','454120260246485','454120260246498','454120260246503','454120260246507','454120260246462','454120260246509','454120260246463','454120260246464','454120260246511','454120260246492','454120260246440','454120260246441','454120260246446','454120260246448','454120260246471','454120260247017','454120260247026','454120260247028','454120260247066','454120260247044','454120260247047','454120260247116','454120260247128','454120260247097','454120260247081','454120260247099','454120260247104','454120260247106','454120260247139','454120260247109','454120260247110','454120260247115','454120260247086','454120260247087','454120260247134','454120260247151','454120260247155','454120260247183','454120260247161','454120260247168','454120260247169','454120260247630','454120260247636','454120260247638','454120260247640','454120260247672','454120260247682','454120260247703','454120260247687','454120260247841','454120260247848','454120260247973','454120260247921','454120260247930','454120260247978','454120260247980','454120260247996','454120260248520','454120260248531','454120260248598','454120260248561','454120260248604','454120260248565','454120260248567','454120260248544','454120260248681','454120260248691','454120260248624','454120260248657','454120260249141','454120260249152','454120260249343','454120260250083','454120260250057','454120260250081','454120260250673','454120260250682','454120260250772','454120260250750','454120260250751','454120260250707','454120260250756','454120260250708','454120260250758','454120260250761','454120260250717','454120260250778','454120260250733','454120260250734','454120260250735','454120260250736','454120260250845','454120260250827','454120260250848','454120260250805','454120260250806','454120260250856','454120260250785','454120260250790','454120260250791','454120260250837','454120260250861','454120260250793','454120260250820','454120260250796','454120260250799','454120260250924','454120260250912','454120260250929','454120260250918','454120260250868','454120260250940','454120260250920','454120260251270','454120260251284','454120260251285','454120260251311','454120260251287','454120260251278','454120260251321','454120260251322','454120260251323','454120260251353','454120260251326','454120260251330','454120260251335','454120260251341','454120260251361','454120260251801','454120260251868','454120260251845','454120260251846','454120260251848','454120260251850','454120260251878','454120260251880','454120260251881','454120260251928','454120260251906','454120260251929','454120260251940','454120260252024','454120260252031','454120260251985','454120260251968','454120260251973','454120260252015','454120260251974','454120260252016','454120260251976','454120260251979','454120260252021','454120260252187','454120260252192','454120260252193','454120260252197','454120260252290','454120260252292','454120260252272','454120260252305','454120260252326','454120260252328','454120260252329','454120260252363','454120260252379','454120260252424','454120260252384','454120260252398','454120260252422','454120260252467','454120260252469','454120260252479','454120260253384','454120260253387','454120260253407','454120260253395','454120260253396','454120260253399','454120260253400','454120260253416','454120260253420','454120260253447','454120260253448','454120260253449','454120260253427','454120260253458','454120260253431','454120260253436','454120260253497','454120260253564','454120260253553','454120260253523','454120260253555','454120260253524','454120260253527','454120260253535','454120260253505','454120260253510','454120260253512','454120260254222','454120260254245','454120260254264','454120260254267','454120260254269','454120260254246','454120260254229','454120260254237','454120260254250','454120260254256','454120260254258','454120260254260','454120260254488','454120260254508','454120260254512','454120260254519','454120260254497','454120260254499','454120260254546','454120260254549','454120260254600','454120260254601','454120260254602','454120260254606','454120260254616','454120260254617','454120260254619','454120260254628','454120260254629','454120260254644','454120260254642','454120260254669','454120260254658','454120260254670','454120260254678','454120260254679','454120260254680','454120260254690','454120260254692','454120260254693','454120260254704','454120260254708','454120260254725','454120260254727','454120260254748','454120260254734','454120260254735','454120260255908','454120260255912','454120260255872','454120260255879','454120260255964','454120260255967','454120260255984','454120260255925','454120260255987','454120260255988','454120260255974','454120260255944','454120260255975','454120260255976','454120260255933','454120260255993','454120260255936','454120260256001','454120260256047','454120260256055','454120260256003','454120260256057','454120260256063','454120260256068','454120260256069','454120260256024','454120260256025','454120260256028','454120260256036','454120260256022','454120260256785','454120260256774','454120260256790','454120260256792','454120260256781','454120260256798','454120260256799','454120260256870','454120260256879','454120260256845','454120260256826','454120260256828','454120260256943','454120260256894','454120260256903','454120260256961','454120260256934','454120260256937','454120260256907','454120260256908','454120260256940','454120260256913','454120260256918','454120260257506','454120260257484','454120260257488','454120260257471','454120260257474','454120260257494','454120260257501','454120260257563','454120260257525','454120260257526','454120260257550','454120260257576','454120260257561','454120260257592','454120260257529','454120260257532','454120260257533','454120260257663','454120260257630','454120260257648','454120260257651','454120260257637','454120260257653','454120260257638','454120260257660','454120260257619','454120260257622','454120260258290','454120260258292','454120260258294','454120260258299','454120260258306','454120260258506','454120260258513','454120260258493','454120260258523','454120260258495','454120260258500','454120260258547','454120260258548','454120260258559','454120260258567','454120260259030','454120260259010','454120260259035','454120260259037','454120260259041','454120260259042','454120260259066','454120260259083','454120260259068','454120260259085','454120260259086','454120260259045','454120260259047','454120260259098','454120260259056','454120260259104','454120260259117','454120260259167','454120260259137','454120260259141','454120260259142','454120260259147','454120260259148','454120260259151','454120260259157','454120260259158','454120260259201','454120260259159','454120260259202','454120260259249','454120260259205','454120260259225','454120260259210','454120260259242','454120260259221','454120260259222','454120260259571','454120260259669','454120260259670','454120260259672','454120260259673','454120260259674','454120260259705','454120260259714','454120260259685','454120260259693','454120260259730','454120260259736','454120260259738','454120260259740','454120260259769','454120260259837','454120260259840','454120260259821','454120260259822','454120260259845','454120260259846','454120260259848','454120260259859','454120260259861','454120260259862','454120260260270','454120260260291','454120260260292','454120260260293','454120260260295','454120260260299','454120260260311','454120260260281','454120260260318','454120260260331','454120260260386','454120260260334','454120260260391','454120260260346','454120260260351','454120260260379','454120260260435','454120260260436','454120260260445','454120260260455','454120260260457','454120260260477','454120260260480','454120260260504','454120260260505','454120260260506','454120260260783','454120260260788','454120260260777','454120260260808','454120260260811','454120260260887','454120260260889','454120260260910','454120260260858','454120260260861','454120260260862','454120260260902','454120260260950','454120260260928','454120260261478','454120260261479','454120260261480','454120260261483','454120260261486','454120260261525','454120260261507','454120260261519','454120260261558','454120260261607','454120260261611','454120260261564','454120260261568','454120260261571','454120260261631','454120260261596','454120260261601','454120260261645','454120260261653','454120260261662','454120260262323','454120260262303','454120260262311','454120260262405','454120260262398','454120260262374','454120260262452','454120260262453','454120260262970','454120260263005','454120260263020','454120260263144','454120260263103','454120260263607','454120260263552','454120260263557','454120260263616','454120260263584','454120260263586','454120260263587','454120260265108','454120260265117','454120260266206','454120260266234','454120260266195','454120260266170','454120260266176','454120260266689','454120260266675','454120260266853','454120260266876','454120260266879','454120260266886','454120260266894','454120260266911','454120260266960','454120260267023','454120260266963','454120260266967','454120260267004','454120260266988','454120260266990','454120260266981','454120260267033','454120260267035','454120260266999','454120260267063','454120260267044','454120260267046','454120260267054','454120260267059','454120260267060','454120260267061','454120260267062','454120260267272','454120260267273','454120260267324','454120260267343','454120260267336','454120260267305','454120260267315','454120260267284','454120260267286','454120260267287','454120260267322','454120260267290','454120260267296','454120260267351','454120260267364','454120260267367','454120260267368','454120260267384','454120260267371','454120260267376','454120260267379','454120260267393','454120260267395','454120260267484','454120260267506','454120260267454','454120260267510','454120260267475','454120260267513','454120260267514','454120260267516','454120260267527','454120260267528','454120260268859','454120260269031','454120260269083','454120260269088','454120260269103','454120260269104','454120260269081','454120260269119','454120260269145','454120260269147','454120260269150','454120260269164','454120260269165','454120260269211','454120260269215','454120260269161','454120260269217','454120260269177','454120260269220','454120260269179','454120260269251','454120260269231','454120260269242','454120260269443','454120260269448','454120260269453','454120260269459','454120260269431','454120260269432','454120260269434','454120260269470','454120260269487','454120260269528','454120260269496','454120260269536','454120260269537','454120260269520','454120260269522','454120260269473','454120260269482','454120260269605','454120260269563','454120260269564','454120260269556','454120260269557','454120260269644','454120260269649','454120260269650','454120260269627','454120260269632','454120260270270','454120260270272','454120260270277','454120260270279','454120260270281','454120260270282','454120260270324','454120260270292','454120260270296','454120260270301','454120260270309','454120260270313','454120260270317','454120260270319','454120260270337','454120260270353','454120260270355','454120260270356','454120260270367','454120260270394','454120260270376','454120260270406','454120260270380','454120260270381','454120260270409','454120260270410','454120260270411','454120260270449','454120260270442','454120260270460','454120260276354','454120260276380','454120260276385','454120260276454','454120260276478','454120260276479','454120260276481','454120260276431','454120260276438','454120260276415','454120260276552','454120260276508','454120260276511','454120260276537','454120260276544','454120260276545','454120260276493','454120260276496','454120260276497','454120260276501','454120260276505','454120260277197','454120260277534','454120260277536','454120260277570','454120260277617','454120260277582','454120260277600','454120260277871','454120260277847','454120260277848','454120260277849','454120260277853','454120260277856','454120260277857','454120260277865'";
		logger.info("SQL:"+sql.replaceAll("\\{\\{imsi\\}\\}", imsi));
		cc = new hello().getConnection();
		st = cc.createStatement();
		rs = st.executeQuery(sql.replaceAll("\\{\\{imsi\\}\\}", imsi));
		
		while(rs.next()){
			m2= new HashMap<String, Object>();
			m2.put("serviceid",  rs.getString("SERVICEID"));
			m2.put("imsi", rs.getString("IMSI"));
			m2.put("start", rs.getString("START_TIME"));
			m2.put("end", rs.getString("END_TIME"));
			data.add(m2);
		}
		
		if(cc!=null) cc.close();
		cc = null;
		if(st!=null) st.close();
		st=null;
		if(rs!=null)rs.close();
		rs=null;*/
		
/*		imsi = "'454120260201862','454120260202901','454120260204937','454120260205682','454120260206797','454120260206803','454120260206835','454120260207053','454120260207073','454120260208139','454120260208143','454120260208225','454120260209242','454120260209329','454120260210418','454120260210452','454120260210487','454120260210538','454120260211110','454120260211144','454120260211205','454120260213073','454120260213075','454120260213114','454120260213139','454120260213121','454120260213248','454120260215323','454120260215916','454120260215957','454120260216077','454120260216094','454120260217548','454120260217543','454120260217597','454120260218077','454120260219467','454120260219537','454120260220655','454120260220635','454120260220685','454120260220748','454120260221730','454120260221779','454120260222665','454120260222791','454120260223364','454120260223367','454120260223361','454120260224268','454120260224349','454120260224365','454120260225375','454120260225533','454120260226594','454120260227445','454120260227388','454120260227325','454120260227349','454120260228197','454120260228375','454120260228558','454120260228561','454120260228578','454120260229637','454120260230008','454120260230039','454120260230043','454120260230074','454120260230092','454120260230832','454120260230833','454120260230872','454120260231945','454120260232031','454120260232076','454120260232036','454120260232039','454120260232046','454120260232211','454120260232215','454120260232218','454120260232273','454120260232227','454120260232233','454120260232290','454120260233072','454120260233045','454120260233079','454120260233081','454120260233104','454120260233086','454120260233127','454120260233112','454120260233116','454120260233117','454120260233158','454120260233162','454120260233165','454120260233124','454120260233221','454120260233223','454120260233199','454120260233233','454120260233241','454120260233287','454120260233271','454120260233325','454120260233370','454120260233374','454120260233381','454120260233343','454120260233346','454120260233399','454120260234162','454120260234167','454120260234172','454120260234199','454120260234203','454120260234166','454120260234463','454120260234494','454120260234495','454120260234496','454120260235182','454120260235589','454120260236557','454120260236558','454120260236563','454120260236509','454120260236531','454120260237649','454120260237737','454120260238217','454120260238292','454120260238295','454120260239076','454120260239295','454120260239320','454120260239360','454120260239366','454120260239388','454120260239393','454120260239341','454120260239504','454120260240647','454120260240672','454120260240674','454120260240717','454120260240682','454120260240736','454120260240719','454120260240738','454120260240745','454120260240723','454120260240734','454120260240714','454120260240688','454120260240750','454120260240781','454120260240787','454120260240788','454120260240789','454120260240758','454120260240767','454120260240768','454120260240769','454120260240816','454120260240797','454120260240802','454120260240803','454120260240820','454120260240804','454120260240829','454120260240833','454120260240834','454120260241077','454120260241078','454120260241118','454120260241119','454120260241121','454120260241141','454120260241123','454120260241143','454120260241125','454120260241145','454120260241131','454120260241151','454120260241103','454120260241106','454120260241258','454120260241261','454120260241267','454120260241253','454120260241930','454120260241931','454120260241942','454120260241944','454120260241945','454120260241946','454120260241957','454120260241961','454120260241962','454120260241980','454120260241982','454120260241970','454120260242000','454120260242002','454120260242012','454120260242018','454120260242019','454120260242023','454120260242026','454120260242041','454120260242170','454120260242175','454120260242220','454120260242224','454120260242243','454120260242244','454120260242247','454120260242253','454120260242255','454120260242180','454120260242184','454120260242190','454120260242192','454120260242193','454120260242211','454120260242284','454120260242286','454120260242259','454120260242306','454120260242291','454120260242270','454120260242323','454120260242275','454120260242311','454120260242339','454120260242344','454120260242368','454120260243059','454120260243061','454120260243054','454120260243297','454120260243310','454120260243342','454120260243404','454120260243409','454120260244373','454120260244432','454120260244381','454120260244522','454120260245416','454120260245460','454120260245424','454120260245426','454120260245428','454120260245467','454120260245470','454120260245450','454120260245522','454120260245477','454120260245540','454120260245541','454120260245482','454120260245547','454120260245483','454120260245488','454120260245490','454120260245554','454120260245500','454120260245503','454120260245526','454120260245506','454120260245533','454120260245513','454120260245596','454120260245599','454120260245602','454120260245558','454120260245559','454120260245562','454120260245564','454120260245571','454120260245576','454120260245582','454120260245613','454120260246516','454120260246518','454120260246525','454120260246557','454120260246582','454120260246541','454120260246585','454120260246562','454120260246590','454120260246544','454120260246528','454120260246595','454120260246570','454120260246575','454120260246534','454120260246554','454120260246637','454120260246606','454120260246613','454120260246614','454120260246619','454120260246621','454120260246674','454120260246623','454120260246633','454120260246634','454120260246677','454120260246683','454120260246688','454120260246692','454120260246693','454120260247691','454120260247758','454120260247811','454120260247812','454120260247763','454120260248017','454120260248020','454120260248758','454120260248752','454120260248830','454120260248883','454120260248858','454120260248871','454120260249018','454120260249057','454120260249049','454120260249103','454120260249116','454120260249121','454120260250482','454120260250530','454120260250538','454120260250541','454120260250572','454120260250620','454120260250646','454120260250647','454120260250636','454120260250641','454120260250642','454120260252085','454120260252089','454120260252053','454120260252063','454120260252056','454120260252116','454120260252117','454120260252079','454120260252100','454120260252129','454120260252130','454120260252146','454120260252169','454120260252140','454120260252156','454120260252224','454120260252225','454120260252237','454120260252206','454120260252208','454120260252214','454120260252246','454120260252250','454120260252266','454120260252267','454120260252524','454120260252529','454120260252535','454120260252540','454120260252542','454120260252588','454120260252606','454120260252544','454120260252547','454120260252594','454120260252548','454120260252596','454120260252550','454120260252602','454120260252613','454120260252618','454120260252575','454120260252578','454120260252626','454120260252663','454120260252629','454120260252637','454120260252645','454120260252642','454120260252647','454120260252654','454120260253324','454120260253271','454120260253327','454120260253328','454120260253330','454120260253285','454120260253332','454120260253333','454120260253288','454120260253341','454120260253278','454120260253363','454120260254003','454120260254056','454120260253989','454120260253991','454120260254028','454120260254030','454120260254031','454120260254035','454120260254039','454120260254015','454120260254066','454120260254067','454120260254103','454120260254077','454120260254078','454120260254079','454120260254081','454120260254127','454120260254131','454120260254106','454120260254115','454120260254116','454120260254120','454120260254087','454120260254121','454120260254088','454120260254100','454120260254101','454120260254144','454120260254151','454120260254158','454120260254159','454120260254160','454120260254183','454120260254205','454120260254191','454120260254165','454120260254199','454120260254201','454120260254171','454120260254172','454120260254178','454120260254766','454120260254767','454120260254772','454120260254753','454120260254773','454120260254762','454120260254806','454120260254846','454120260254787','454120260254816','454120260254852','454120260254854','454120260254860','454120260254830','454120260254822','454120260254834','454120260254836','454120260254838','454120260254841','454120260254869','454120260255284','454120260255285','454120260255270','454120260255272','454120260255279','454120260255280','454120260255282','454120260255330','454120260255302','454120260255304','454120260255336','454120260255339','454120260255308','454120260255313','454120260255317','454120260255383','454120260255353','454120260255356','454120260255388','454120260255389','454120260255408','454120260255396','454120260255369','454120260255359','454120260255418','454120260255445','454120260255448','454120260255426','454120260255431','454120260255434','454120260255439','454120260255465','454120260255468','454120260255457','454120260255459','454120260255460','454120260256072','454120260256143','454120260256145','454120260256155','454120260256126','454120260256131','454120260256132','454120260256088','454120260256134','454120260256136','454120260256102','454120260256228','454120260256171','454120260256172','454120260256208','454120260256187','454120260256188','454120260256210','454120260256211','454120260256213','454120260256193','454120260256241','454120260256174','454120260256219','454120260256198','454120260256177','454120260256178','454120260256180','454120260256271','454120260256272','454120260256275','454120260256290','454120260256304','454120260256306','454120260256308','454120260256363','454120260256364','454120260256346','454120260256359','454120260256329','454120260256330','454120260256331','454120260256332','454120260256992','454120260257009','454120260257032','454120260256994','454120260257040','454120260257011','454120260257042','454120260257019','454120260256976','454120260257078','454120260257106','454120260257079','454120260257109','454120260257119','454120260257046','454120260257121','454120260257048','454120260257049','454120260257052','454120260257058','454120260257099','454120260257166','454120260257148','454120260257125','454120260257155','454120260257138','454120260257139','454120260257140','454120260257273','454120260257277','454120260257278','454120260257279','454120260257352','454120260257354','454120260257358','454120260257359','454120260257307','454120260257310','454120260257322','454120260257293','454120260257298','454120260257404','454120260257430','454120260257383','454120260257433','454120260257435','454120260257388','454120260257437','454120260257395','454120260257396','454120260257397','454120260257369','454120260257412','454120260257373','454120260257416','454120260257376','454120260257379','454120260257445','454120260257450','454120260257462','454120260258074','454120260258075','454120260258077','454120260258079','454120260258083','454120260258143','454120260258151','454120260258107','454120260258110','454120260258153','454120260258115','454120260258118','454120260258128','454120260258091','454120260258097','454120260258165','454120260258166','454120260258185','454120260258170','454120260258224','454120260258204','454120260258181','454120260258210','454120260258192','454120260258200','454120260258201','454120260258227','454120260258229','454120260258239','454120260258241','454120260258248','454120260258260','454120260258261','454120260258378','454120260258379','454120260258343','454120260258347','454120260258333','454120260258336','454120260258354','454120260258388','454120260258389','454120260258391','454120260258362','454120260258396','454120260258426','454120260258463','454120260258434','454120260258436','454120260258405','454120260258441','454120260258445','454120260258448','454120260258460','454120260258419','454120260258470','454120260258420','454120260258472','454120260258478','454120260258481','454120260258488','454120260259253','454120260259465','454120260259469','454120260259471','454120260259457','454120260259459','454120260259497','454120260259498','454120260259524','454120260259536','454120260259543','454120260259589','454120260259549','454120260259551','454120260259554','454120260259556','454120260259626','454120260259629','454120260259633','454120260259634','454120260259636','454120260259639','454120260259616','454120260260520','454120260260617','454120260260623','454120260260653','454120260260665','454120260260669','454120260260675','454120260260680','454120260260683','454120260260689','454120260260693','454120260260583','454120260260737','454120260260588','454120260260590','454120260260745','454120260261401','454120260261424','454120260261406','454120260261425','454120260261426','454120260261429','454120260261430','454120260261458','454120260261694','454120260261710','454120260261746','454120260261734','454120260261747','454120260261750','454120260261815','454120260261858','454120260262807','454120260262787','454120260262790','454120260262835','454120260262865','454120260262899','454120260262847','454120260262850','454120260262851','454120260262855','454120260262908','454120260262948','454120260262927','454120260265530','454120260265533','454120260265538','454120260265549','454120260265540','454120260265541','454120260265583','454120260265567','454120260265588','454120260265591','454120260265604','454120260265607','454120260265577','454120260265610','454120260265612','454120260265653','454120260265625','454120260265626','454120260265632','454120260265663','454120260265666','454120260265675','454120260265723','454120260265745','454120260265707','454120260265686','454120260265734','454120260265740','454120260265741','454120260266623','454120260266625','454120260266613','454120260266614','454120260266615','454120260266642','454120260266661','454120260266763','454120260266777','454120260266825','454120260266831','454120260267694','454120260267723','454120260267791','454120260267797','454120260267757','454120260267818','454120260267822','454120260267831','454120260267851','454120260267876','454120260267884','454120260267890','454120260267891','454120260268290','454120260268315','454120260268888','454120260268878','454120260268947','454120260268952','454120260268957','454120260268961','454120260268940','454120260268966','454120260268962','454120260268976','454120260269013','454120260269016','454120260268997','454120260269295','454120260269297','454120260269299','454120260269323','454120260269329','454120260269306','454120260269310','454120260269311','454120260269333','454120260269368','454120260269369','454120260269371','454120260269375','454120260269342','454120260269347','454120260269350','454120260269407','454120260269411','454120260269412','454120260269415','454120260269422','454120260269426','454120260269397','454120260270111','454120260270113','454120260270114','454120260270115','454120260270122','454120260270156','454120260270141','454120260270172','454120260270185','454120260270246','454120260270223','454120260270226','454120260270260','454120260270233','454120260270191','454120260270241','454120260270242','454120260270199','454120260270210','454120260270211','454120260270214','454120260270267','454120260270483','454120260270476','454120260270500','454120260270508','454120260270521','454120260275528','454120260275551','454120260275552','454120260275569','454120260275571','454120260275583','454120260275632','454120260275633','454120260275625','454120260275654','454120260275656','454120260275661','454120260275663','454120260275666','454120260276307','454120260276310','454120260276315','454120260276277','454120260276281','454120260276288','454120260276290','454120260276285','454120260276286','454120260276293','454120260276348','454120260276972','454120260276978','454120260276980','454120260277006','454120260277027','454120260277179','454120260277691','454120260277713','454120260277715','454120260277716','454120260277678','454120260277722','454120260277683','454120260277686','454120260277742','454120260277743','454120260277760','454120260277785','454120260277786','454120260277809','454120260277818'";
		logger.info("SQL:"+sql.replaceAll("\\{\\{imsi\\}\\}", imsi));
		cc = new hello().getConnection();
		st = cc.createStatement();
		rs = st.executeQuery(sql.replaceAll("\\{\\{imsi\\}\\}", imsi));
		
		while(rs.next()){
			m2= new HashMap<String, Object>();
			m2.put("serviceid",  rs.getString("SERVICEID"));
			m2.put("imsi", rs.getString("IMSI"));
			m2.put("start", rs.getString("START_TIME"));
			m2.put("end", rs.getString("END_TIME"));
			data.add(m2);
		}
		
		if(cc!=null) cc.close();
		cc = null;
		if(st!=null) st.close();
		st=null;
		if(rs!=null)rs.close();
		rs=null;
		
		Workbook wb = Excel.createExcel(head, data, "xlsx");
		
		logger.info("Create File ");
		File f = new File("TapOut mapping.xlsx");
		FileOutputStream fo = new FileOutputStream(f);
		wb.write(fo);
		fo.close();
		logger.info("Create File End...");
		*/
		
		/*try {
			removeShellCommandTest();
		} catch (JSchException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
		
		//createNamedBindingExcel();
		//readExcel("data.xlsx");
		
		/*DataSource ds = null;
		Connection cc = null;
		Statement st = null;
		ResultSet rs = null;
		try {
			
			//ds = new SimpleConnectionPoolDataSource();
			//cc = ds.getConnection();
			cc = new hello().getConnection();
			st = cc.createStatement();
			rs = st.executeQuery("select 'hello' ab from dual");
			while(rs.next()){
				System.out.println(rs.getString("ab"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			try {
				if(cc!=null){ cc.close();
				}
				if(rs!=null) rs.close();
				if(st!=null) st.close();
				
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}			
		}*/

		//System.out.println("1d23".matches("^\\d+$"));
		
		/*try {
			tool.sendMailwithoutAuthenticator("202.133.250.242",25,"smtp",
					"ranger.kao@sim2travel.com","kkk770204",
					"mailSample","ranger.kao@sim2travel.com,k1988242001@gmail.com",
					"mail test","mail for test.");
		} catch (AddressException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (MessagingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
		/*List<Double> list = new ArrayList<Double>();
		
		for(int i = 0 ;i<10;i++){
			list.add(Math.random()*1000);
		}

		
		mergeSort(list,0,list.size()-1);		*/
		
		
		/*Calendar endTime = Calendar.getInstance();
		
		endTime.setTime(new Date());
		endTime.set(Calendar.DAY_OF_YEAR, endTime.get(Calendar.DAY_OF_YEAR)+1);
		endTime.set(Calendar.HOUR_OF_DAY, 0);
		endTime.set(Calendar.MINUTE, 0);
		endTime.set(Calendar.SECOND, 0);
		System.out.println(endTime.getTime());*/
		
		/*
		String ipaddr = "221.177.201.14";		
		
		if(ipaddr.matches("^\\d+\\.\\d+\\.\\d+\\.\\d+$")){
			String [] ips = ipaddr.split("\\.");
			long ipNumber =0L;
			for(int j=0;j<ips.length;j++){
				ipNumber+=Integer.parseInt(ips[j])*Math.pow(256, 3-j);
			}
			System.out.println("ipNumber="+ipNumber);
		}*/
		
		/*long st = System.currentTimeMillis();
		System.out.println(st);
		readTxt();
		System.out.println("ended pass time="+(System.currentTimeMillis()-st));*/
	
		
		//DBTest();
		
		/*Calendar c = Calendar.getInstance();
		c.set(Calendar.DAY_OF_YEAR, c.get(Calendar.DAY_OF_YEAR)-59);
		c.set(Calendar.HOUR_OF_DAY, 0);
		c.set(Calendar.MINUTE, 0);
		c.set(Calendar.SECOND, 0);
		System.out.println(c.getTime());*/
		
		/*System.out.println(Integer.MAX_VALUE);
		System.out.println(Double.MAX_VALUE);
		*/

		/*File f = new File("C:\\Users\\ranger.kao\\Desktop\\1104Addon\\20151223\\AddServer.002.454120260258715.20151221.txt");
		System.out.println(f.length());*/
		
		
		
		/*System.out.println(MessageType.SMSC_DEL_RECEIPT.value());
		System.out.println(MessageType.DEFAULT.value());*/
		
		
		/*try {
			System.out.println(java.net.URLEncoder.encode("UNUSED=on&UDH=&Data=B30200F1&PID=7F&DCS=F6&Submit=Submit&Binary=1","Big5"));
			System.out.println(java.net.URLEncoder.encode("家庭","big5"));
			System.out.println(java.net.URLEncoder.encode("家庭","UTF-16BE"));
			System.out.println(java.net.URLEncoder.encode("UNUSED=on&UDH=&Data=b00c2b3835323536303935383332&PID=7F&DCS=F6&Submit=Submit&Binary=1","UTF-16BE"));
			System.out.println(java.net.URLEncoder.encode("D=","UTF-16BE"));
			System.out.println(java.net.URLDecoder.decode("%90%19%66%2F%54%2B%51%69%52%47%7C%21%8A%0A%4E%4B%95%77%7C%21%8A%0A%7B%C4%4F%8B%FF%1A%60%A8%53%EF%7D%93%75%31%00%20%00%55%00%44%00%48%00%49%00%20%53%CA%00%20%00%44","UTF-16BE"));
			System.out.println(java.net.URLDecoder.decode("%90%19%00%49%00%4D","UTF-16BE"));

			System.out.println(java.net.URLEncoder.encode("簡訊測試","UTF-16BE"));
			
			String s = "UNUSED=on&UDH=&Data=B30200F1&PID=7F&DCS=F6&Submit=Submit&Binary=1";
			for(byte b : s.getBytes("UTF-16BE")){
				System.out.print(b+"\t");
			}
			System.out.println();
			byte e = -118;
			for(byte b : s.getBytes("UTF-16BE")){
				String c = Integer.toHexString(b);
				
				System.out.print((c.length()==1?"0"+c:(c.length()>2?c.substring(c.length()-2):c))+"");
			}
			System.out.println();

		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	*/
		
		//one way encode
		//System.out.println("MD5 encodeing result : "+md5Encode("kelly"));	
		/*System.out.println("MD5 encodeing result : "+md5Encode("panda"));	
		System.out.println("MD5 encodeing result : "+md5Encode("yvonne"));	
		System.out.println("MD5 encodeing result : "+md5Encode("zora"));	
		System.out.println("MD5 encodeing result : "+md5Encode("helen"));	
		System.out.println("MD5 encodeing result : "+md5Encode("wendy"));	*/
		//System.out.println("SHA encodeing result : "+SHAEncode("Sim217Life"));	
		
		//非對稱加密(解密必須保留當初建立的key)
		/*//KeyPairGenerator类用于生成公钥和私钥对，基于RSA算法生成对象  
        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("RSA");  
        //初始化密钥对生成器，密钥大小为1024位  
        keyPairGen.initialize(1024);  
        //生成一个密钥对，保存在keyPair中  
        KeyPair keyPair = keyPairGen.generateKeyPair();  
        //得到私钥  
        RSAPrivateKey privateKey = (RSAPrivateKey)keyPair.getPrivate();   
        System.out.println("private Key:"+privateKey.toString());
        //得到公钥  
        RSAPublicKey publicKey = (RSAPublicKey)keyPair.getPublic();
        System.out.println("publicKey Key:"+publicKey.toString());
        
        String s = RSAEncode("source",publicKey);
        System.out.println("RSA encodeing result : "+RSAEncode("source",publicKey));
        System.out.println("RSA Decodeing result : "+RSADecode(s,privateKey));*/

		/*
		System.out.println("abc"+"\t"+"abc".getBytes().length);
		System.out.println("中華門號"+"\t"+"中華門號".getBytes().length);
		System.out.println("主新德科技股份有限公司"+"\t"+"主新德科技股份有限公司".getBytes().length);
		String report = "";
		int[] sf = new int[]{25,20,20,20,30,14,45,45,60,25,10};
		String [] v = new String[]{
				"中華門號","起始時間","結束時間","身份證字號","Email","已警示","建立時間","取消時間","客戶姓名","進線者姓名","手機型號"						
				};
		report += pfString(sf,v);
		
		sf = new int[]{13,10,10,12,30,7,20,20,60,30,10};
		Connection conn=getConnection();
		Statement st = null;
		ResultSet rs = null;
		String sql=
				"SELECT A.PID,B.FOLLOWMENUMBER CHTMSISDN,A.SERVICEID,A.MCC,A.ALERTED,A.ID,A.CALLER_NAME,A.CUSTOMER_NAME,A.PHONE_TYPE,A.EMAIL,A.CANCEL_REASON, "
				+ "A.START_DATE,A.END_DATE,"
				+ "TO_CHAR(A.CREATE_TIME,'yyyy/MM/dd hh24:mi:ss') CREATE_TIME,TO_CHAR(A.CANCEL_TIME,'yyyy/MM/dd hh24:mi:ss') CANCEL_TIME "
				+ "from HUR_VOLUME_POCKET A,FOLLOWMEDATA B "
				+ "WHERE A.SERVICEID = B.SERVICEID AND A.TYPE=0 AND B.FOLLOWMENUMBER like '886%' "
				+ "ORDER BY A.START_DATE DESC ";
		try {
			st = conn.createStatement();
			rs=st.executeQuery(sql);
			
			while(rs.next()){
				report += pfString(sf,new String[]{
						rs.getString("CHTMSISDN"),
						rs.getString("START_DATE"),
						rs.getString("END_DATE"),
						nvl(rs.getString("ID")," "),
						nvl(rs.getString("EMAIL")," "),
						rs.getString("ALERTED"),
						rs.getString("CREATE_TIME"),
						nvl(rs.getString("CANCEL_TIME")," "),
						convertString(rs.getString("CUSTOMER_NAME"),"ISO-8859-1","Big5"),
						convertString(rs.getString("CALLER_NAME"),"ISO-8859-1","Big5"),
						convertString(rs.getString("PHONE_TYPE"),"ISO-8859-1","Big5"),
						});
			}
			
			System.out.println(report);
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			try {
				if(st != null)
					st.close();
				if(rs!=null)
					rs.close();
				conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}*/
		
		
		
		/*Connection conn=getConnection();
		
		try {
			conn.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Statement st = null;
		try {
			st = conn.createStatement();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("time 1");
		
		try {
			st.execute("select 'A' from dual");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			try {
				st.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		System.out.println("time 2");*/
		
		
	}
	
	public static void readExcelMailContent(String fileName) throws FileNotFoundException, IOException{
		String outputFileName = "output.txt";
		StringBuffer sb = new StringBuffer();
		
		Workbook wb = new HSSFWorkbook(new FileInputStream(new File(fileName)));
		Sheet sheet = null;
		Row row = null;
		Cell cell = null;
		//取得Sheet個數，回傳N
		int SN = wb.getNumberOfSheets();
		SN = 1;
		for (int s = 0; s < SN; s++) {
			sheet = wb.getSheet(wb.getSheetName(s));
			if (sheet == null)
				continue;

			Map<String, Integer> m = new HashMap<String, Integer>();

			int RN = sheet.getLastRowNum();
			System.out.println(RN);
			
			if (RN > 1) {
				//設定第一行，Title行
				row = sheet.getRow(0);
				for (int i = 0; i < row.getLastCellNum(); i++) {
					if (row.getCell(i) == null)
						continue;
					String key = row.getCell(i).toString();
					int value = i;

					out.println(key + ":" + value);
					m.put(key, value);
				}

				System.out.println(RN);
				//設定資料
				for (int r = 1; r <= RN; r++) {
					row = sheet.getRow(r);
					if (row == null) {
						continue;
					}
					//取得cell個數，回傳N-1
					int CN = row.getLastCellNum();
					String content = getExcelValue(row.getCell(m.get("本文")));
					content = content.trim();
					String name = getExcelValue(row.getCell(m.get("寄件者名稱")) );
					name = name.trim();
					String mail = getExcelValue(row.getCell(m.get("寄件者地址")) );
					mail = mail.trim();
					String subject = getExcelValue(row.getCell(m.get("主旨")) );
					subject = subject.trim();
					
					String subJectMatches = "";
					String matchS = "(09|886|852|86)[0-9-\\. ]+";
					for(String ss : regularFind(subject,matchS)){
						subJectMatches+=ss+",";
					}
					
					String contentMatches = "";
					for(String ss : regularFind(content,matchS)){
						contentMatches+=ss+",";
					}
					
					
					sb.append(name+"\t"+mail+"\t"+(!"".equals(subJectMatches)?subJectMatches.substring(0,subJectMatches.length()-1):subJectMatches)+"\t"+
					(!"".equals(contentMatches)?contentMatches.substring(0,contentMatches.length()-1):contentMatches)+"\n");
				}
			}
		}
		
		BufferedWriter fw = null;
		
		File file = new File(outputFileName);
		fw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),"UTF8")); 
		fw.append(sb.toString());
		//flush 後才會在文件顯示內容，可忽略讓程式自動flush
		fw.flush(); 
		
		fw.close();
		
	}
	
	public static List<String> regularFind(String content, String regex) {
		
		Pattern p =Pattern.compile(regex);
		Matcher m = p.matcher(content);
		
		List<String> list = new ArrayList<String>();
		
		while(m.find()){
			list.add(m.group());
		}
		
		return list;
	}
	
	
	public static void removeShellCommandTest() throws IOException, JSchException{
		
		/*String hostname = "192.168.10.199";
		String username = "root";
		String password = "27197171";*/
		
		String hostname = "10.42.1.80";
		String username = "s2tpvn";
		String password = "s2tpvn";
		int port = 22;
		
		JSch jsch = new JSch();

		com.jcraft.jsch.Session session = jsch.getSession(username, hostname, port);
        session.setConfig("StrictHostKeyChecking", "no");
        session.setPassword(password);
        session.connect();
		
      //create the excution channel over the session
        ChannelExec channelExec = (ChannelExec)session.openChannel("exec");

        // Gets an InputStream for this channel. All data arriving in as messages from the remote side can be read from this stream.
        InputStream in = channelExec.getInputStream();

        // Set the command that you want to execute
        // In our case its the remote shell script
        channelExec.setCommand("/export/home/s2t/pvn/bin/Audit.sh");

        
        // Execute the command
        channelExec.connect();
        
        channelExec.run();

        // Read the output from the input stream we set above
        BufferedReader reader = new BufferedReader(new InputStreamReader(in));
        String line;
        List<String> result = new ArrayList<String>();
        //Read each line from the buffered reader and add it to result list
        // You can also simple print the result here 
        while ((line = reader.readLine()) != null)
        {
        
			result.add(line);
			System.out.println(line);
        }

        //retrieve the exit status of the remote command corresponding to this channel
        int exitStatus = channelExec.getExitStatus();

        //Safely disconnect channel and disconnect session. If not done then it may cause resource leak
        channelExec.disconnect();
        session.disconnect();

        if(exitStatus < 0){
           // System.out.println("Done, but exit status not set!");
        }
        else if(exitStatus > 0){
           // System.out.println("Done, but with error!");
        }
        else{
           // System.out.println("Done!");
        }
        System.out.println("exitStatus:"+exitStatus);
		
		
		/*int port = 22;
		try

		{

			 Create a connection instance 
			ch.ethz.ssh2.Connection conn = new ch.ethz.ssh2.Connection(hostname);

			 Now connect 

			conn.connect();

			 Authenticate 

			boolean isAuthenticated = conn.authenticateWithPassword(username, password);

			 認證失敗 
			if (isAuthenticated == false)		throw new IOException("Authentication failed.");

			 Create a session 
			Session sess = conn.openSession();

			// sess.execCommand("uname -a && date && uptime && who");

			sess.execCommand("/export/home/s2t/pvn/bin/Audit.sh");
			//sess.execCommand("pwd");

			System.out.println("Here is some information about the remote host:");

			InputStream stdout = new StreamGobbler(sess.getStdout());

			BufferedReader br = new BufferedReader(new InputStreamReader(stdout));

			while (true)

			{

				String line = br.readLine();

				if (line == null)

					break;

				System.out.println(line);

			}

			 Show exit status, if available (otherwise "null") 

			System.out.println("ExitCode: " + sess.getExitStatus());
			System.out.println("ExitSignal: " + sess.getExitSignal());

			 Close this session 

			sess.close();

			 Close the connection 

			conn.close();

		}

		catch (IOException e)

		{

			e.printStackTrace(System.err);
			//System.exit(2);

		}*/
		
	}
	
	static SimpleDateFormat  sdfyyyyMMdd = new SimpleDateFormat("yyyyMMdd");
	
	public static void createNamedBindingExcel(){
		String fileName = "nameBinding_"+sdfyyyyMMdd.format(new Date())+".xlsx";
		List<Map<String,String>> head = new ArrayList<Map<String,String>>();
		List<Map<String,Object>> data = new ArrayList<Map<String,Object>>();
		
		
		Map<String,String> m = new HashMap<String,String>();
		m.put("name", "姓名");m.put("col", "name");
		head.add(m);
		m = new HashMap<String,String>();
		m.put("name", "證件類型");m.put("col", "type");
		head.add(m);
		m = new HashMap<String,String>();
		m.put("name", "證件編號");m.put("col", "id");
		head.add(m);
		m = new HashMap<String,String>();
		m.put("name", "中國號");m.put("col", "chinaMsisdn");
		head.add(m);
		
		
		Connection conn = null;
		Statement st = null;
		ResultSet rs = null;
		try {
			conn = DriverManager.getConnection("jdbc:mysql://192.168.10.199:3306/CRM_DB?characterEncoding=utf8", "crmuser", "crm");
			st = conn.createStatement();
			
			String sql = "select serviceid,name,id,type,chinaMsisdn "
					+ "from CRM_DB.CRM_NAME_VERIFIED "
					+ "where send_date is null ";
			
			out.println("Execute SQL:"+sql);
			
			rs =st.executeQuery(sql);
			
			
			while(rs.next()){
				Map<String,Object> m2 = new HashMap<String,Object>();
				m2.put("name", rs.getString("name"));
				m2.put("id", rs.getString("id"));
				m2.put("type", rs.getString("type"));
				m2.put("chinaMsisdn", rs.getString("chinaMsisdn"));
				data.add(m2);
			}
			Workbook wb = createExcel(head,data,"xlsx");
			File f = new File(fileName);
			FileOutputStream fo = new FileOutputStream(f);
			wb.write(fo);
			fo.close();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			try {
				if(st!=null) st.close();
				if(conn!=null) conn.close();
			} catch (SQLException e) {	}
		}
		
	}
	
	public static Workbook createExcel(List<Map<String,String>> head,List<Map<String,Object>> data,String type) throws IOException{
		Workbook wb = null;
		int rowN = 0;
		int sheetN = 0;
		//建立xls檔案
		if(type.matches("^xls$")){
			wb = new HSSFWorkbook();  
			HSSFSheet sheet = (HSSFSheet) wb.createSheet("sheet"+sheetN++);  
			sheet.setColumnWidth(0, 20*256);
			sheet.setColumnWidth(1, 15*256);
			sheet.setColumnWidth(2, 20*256);
			HSSFRow row = sheet.createRow(rowN++);
			HSSFCell cell ;
			//欄位樣式
			HSSFCellStyle style = (HSSFCellStyle) wb.createCellStyle(); 

			//字型大小
			HSSFFont font = (HSSFFont) wb.createFont();
			font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD); //粗體

			style.setFont(font);
			
			//寫入Header
			for(int col = 0 ;col < head.size() ;col++){
				cell = row.createCell(col);
				cell.setCellStyle(style);
				cell.setCellValue(head.get(col).get("name"));
			}
			
			for(int r = 0 ; r<data.size() ;r++){
				row = sheet.createRow(rowN++);
				for(int col = 0; col < head.size() ;col++){
					row.createCell(col).setCellValue(nvl(data.get(r).get(head.get(col).get("col")),"").toString());;
				}
				//滿頁換Sheet
				if(rowN==65534){
					sheet = (HSSFSheet) wb.createSheet("sheet"+sheetN++);
					rowN = 0;
				}
			}
			
		
		}
		
		//建立xlsx檔案
		if(type.matches("^xlsx$")){
			wb = new XSSFWorkbook();  
			XSSFSheet sheet = (XSSFSheet) wb.createSheet("sheet"+sheetN++);  
			sheet.setColumnWidth(0, 20*256);
			sheet.setColumnWidth(1, 15*256);
			sheet.setColumnWidth(2, 20*256);
			XSSFRow row = sheet.createRow(rowN++);
			XSSFCell cell ;
			//欄位樣式
			XSSFCellStyle style = (XSSFCellStyle) wb.createCellStyle(); 

			//字型大小
			
			
			//寫入Header
			for(int col = 0 ;col < head.size() ;col++){
				cell = row.createCell(col);
				cell.setCellStyle(style);
				cell.setCellValue(head.get(col).get("name"));
			}
			
			for(int r = 0 ; r<data.size() ;r++){
				row = sheet.createRow(rowN++);
				for(int col = 0; col < head.size() ;col++){
					row.createCell(col).setCellValue(nvl(data.get(r).get(head.get(col).get("col")),"").toString());;
				}
				//滿頁換Sheet
				if(rowN==65534){
					sheet = (XSSFSheet) wb.createSheet("sheet"+sheetN++);
					rowN = 0;
				}
			}
		}
		
		return wb;
	}
	
	public static Object nvl(Object msg,Object s){
		if(msg==null)
			msg = s;
		return msg;
	}
	
	public static boolean readExcel(String fileName) throws IOException, SQLException{
		
		Connection conn1 = null,conn2 = null;
		Statement st1 = null, st2 = null;
		ResultSet rs = null ;
		boolean result = false;
		
		try {
			conn1 = DriverManager.getConnection("jdbc:oracle:thin:@10.42.1.80:1521:s2tbs", "s2tbsadm", "s2tbsadm");
			st1 = conn1.createStatement();
			conn2 = DriverManager.getConnection("jdbc:mysql://192.168.10.199:3306/CRM_DB?characterEncoding=utf8", "crmuser", "crm");
			st2 = conn2.createStatement();
			Workbook wb = new XSSFWorkbook(new FileInputStream(new File(fileName)));
			Sheet sheet = null;
			Row row = null;
			Cell cell = null;
			//取得Sheet個數，回傳N
			int SN = wb.getNumberOfSheets();
			SN = 1;
			for (int s = 0; s < SN; s++) {
				sheet = wb.getSheet(wb.getSheetName(s));
				if (sheet == null)
					continue;

				Map<String, Integer> m = new HashMap<String, Integer>();

				int RN = sheet.getLastRowNum();
				System.out.println(RN);
				
				if (RN > 1) {
					//設定第一行，Title行
					row = sheet.getRow(0);
					for (int i = 0; i < row.getLastCellNum(); i++) {
						if (row.getCell(i) == null)
							continue;
						String key = row.getCell(i).toString();
						int value = i;

						out.println(key + ":" + value);
						m.put(key, value);
					}

					System.out.println(RN);
					//設定資料
					for (int r = 1; r <= RN; r++) {
						row = sheet.getRow(r);
						if (row == null) {
							continue;
						}
						//取得cell個數，回傳N-1
						int CN = row.getLastCellNum();
						String chinaPhone = getExcelValue(row.getCell(m.get("chinaPhone")));
						chinaPhone = chinaPhone.trim();
						String chtPhone = getExcelValue(row.getCell(m.get("chtPhone")) );
						chtPhone = chtPhone.trim();
						String name = getExcelValue(row.getCell(m.get("name")) );
						name = name.trim();
						String type = getExcelValue(row.getCell(m.get("type")) );
						type = type.trim();
						String id = getExcelValue(row.getCell(m.get("id")) );
						id = id.trim();
						String remark =  getExcelValue(row.getCell(m.get("remark")));
						remark = remark.trim();

						String serviceId = null;
						String VLN = null;
						//out.println(chinaPhone + "," + chtPhone + "," + name + "," + type + "," + id + "," + remark);
						
						String sql="";
						
						if(chtPhone==null){
							logger.error("For data "+chinaPhone+"("+name+") without chtPhone.");
							continue;
						}
						
						if(chtPhone.startsWith("886")){
							sql = "select A.SERVICEID "
									+ "from FOLLOWMEDATA A "
									+ "where A.FOLLOWMENUMBER = '"+chtPhone+"' ";
						}else if(chtPhone.startsWith("852")){
							sql = "select A.SERVICEID "
									+ "from SERVICE A "
									+ "where A.SERVICECODE = '"+chtPhone+"' ";
						}else{
							logger.error("the formate of  number "+chtPhone+" error.");
							continue;
						}
						
						
						logger.info("Execute SQL :"+sql);
						rs = st1.executeQuery(sql);
						if(rs.next()){
							serviceId = rs.getString("SERVICEID");
						}

						if(serviceId == null){
							logger.error("For number "+chtPhone+" can't get serviceid.");
							continue;
						}
						
						rs.close();
						
						sql = "select a.serviceid,b.COU,a.VLN,a.VLNTYPE "
								+ "from vlnnumber a ,(	select serviceid,count(1) cou "
								+ "									from vlnnumber "
								+ "									where VLN like '861%' "
								+ "									group by serviceid )B "
								+ "where a.serviceid = b.serviceid and VLN like '861%' and a.serviceid = "+serviceId+" ";
						
						logger.info("Execute SQL :"+sql);
						rs = st1.executeQuery(sql);
						int vlnCount = 0;
						Integer vlnTYpe = null;
						if(rs.next()){
							vlnCount = rs.getInt("COU");
							VLN = rs.getString("VLN");
							vlnTYpe =rs.getInt("VLNTYPE");
						}
						
						if(vlnCount == 0 ){
							logger.error("For number "+chtPhone+" can't get VLN number.");
							continue;
						}
						
						if(vlnCount == 1 && !VLN.equals(chinaPhone)){
							logger.error("For number "+chtPhone+" the VLN("+VLN+") number not equal to "+chinaPhone +" .");
							continue;
						}
						
						if(vlnCount > 1){
							logger.error("For number "+chtPhone+" get more than one VLN number.");
							continue;
						}
						logger.info("For number "+chtPhone+" the VLN("+VLN+") number is "+chinaPhone +" ( "+vlnTYpe+" ).");
						
						sql = "insert into CRM_DB.CRM_NAME_VERIFIED(serviceid,name,id,type,remark,chinaMsisdn,chtMsisdn) "
								+ "values('"+serviceId+"','"+name+"','"+id+"','"+type+"','"+remark+"','"+chinaPhone+"','"+chtPhone+"')";						
						logger.info("Execute SQL :"+sql);
						try {
							
							st2.executeUpdate(sql);
						} catch (Exception e) {
							logger.error("insert data error",e);
							continue;
						}
					}
				}
			} 
		} finally {
			if(st1!=null) st1.close();
			if(st2!=null) st2.close();
			if(conn1!=null) conn1.close();
			if(conn2!=null) conn2.close();
		}
		return result;
	}
	
	public static String getExcelValue(Cell cell){
		if(cell == null)
			return "";
		
		String result = null;
		if(cell.getCellType() == Cell.CELL_TYPE_NUMERIC)
			result = String.valueOf(cell.getNumericCellValue());
		else if(cell.getCellType() == Cell.CELL_TYPE_STRING)
			result = cell.getStringCellValue();
		else if(cell.getCellType() == Cell.CELL_TYPE_NUMERIC)
			result = (cell.getBooleanCellValue()?"TRUE":"False");
		
		if(result==null)
			result = "";
		return result;
	}
	
	public static String FormatNumString(Double value,String form){
		if(form==null || "".equals(form)){
			form="#,##0.00";
		}
			
		DecimalFormat df = new DecimalFormat(form);   
		String str=df.format(value);
		
		return str;
	}
	
	public static String pfString(int[] f,String[] value){
		String r ="";
		/*int sum = 0;
		for(int i = 0 ; i<f.length ; i++){
			
			int j = 0;
			String v = "";
			if(i<value.length){
				j = value[i].getBytes().length;
				v = value[i];
			}
			r +=v;
			for(;j<f[i];j++)
				r+=" ";
			
			sum+=f[i];
		}
		r+="\n";*/
		if(value.length>0)
			r+=value[0];
		if(value.length>1){
			for(int i = 1;i<value.length;i++){
				r+="|"+value[i];
			}
		}
		r+="\n";
		return r;
	}
	
	public static String convertString(String msg,String sCharset,String dCharset) throws UnsupportedEncodingException{
		
		if(msg==null)
			msg=" ";
		
		return sCharset==null? new String(msg.getBytes(),dCharset):new String(msg.getBytes(sCharset),dCharset);
	}
	public static String nvl(String msg,String s){
		if(msg==null)
			msg = s;
		return msg;
	}
	/**
	 * 指標性Merge sort
	 * 
	 * start 起點
	 * 
	 * end 終點(包含)，list.size()-1
	 */
	public static void mergeSort(List<Double> list,int start,int end){
		
		//如果只剩下一個單元，直接丟回
		if(start>=end)
			return;
		
		int middle = (int) Math.floor((end-start)/2);
		middle+=start;
		
		//merge left
		mergeSort(list,start,middle);
		//merge right
		mergeSort(list,middle+1,end);
		
		int i = start;
		int j = middle+1;
		
		//規則：
		//當第i的數字<=第j的數，i 已經是最前面，i比較數字改成第i+1位
		//當第i的數字   >第j的數，將第j的數字插入第i數字之前，比較數字改成第i+1位，j改成j+1位
		//j的前面永遠是i數列的比對終點
		//當i==j或是j>end時，比對結束，剩下的也已經在之前排序好
		
		while(i<j && j<=end){
			
			if(list.get(i)<=list.get(j)){
				i++;
			}else{
				double t = list.get(j);
				list.remove(j);
				list.add(i, t);
				i++;j++;
			}
			
		}
		System.out.println(start+":"+end);
		for(double d : list){
			System.out.print(d+" ");
		}
		System.out.println();
	}
	
	
	
	static Map<String,String> excludeTWNLDNUMBER = new HashMap<String,String>();
	public static void readTxt(){
		BufferedReader reader = null;
		String str = null;
		try {
			String path = hello.class.getClassLoader().getResource("").getPath();
			System.out.println("path:"+path);
			String filePath = path+"excludeNumbers.txt";
			
			reader = new BufferedReader(new InputStreamReader(new FileInputStream(filePath), "UTF-8"));
			excludeTWNLDNUMBER.clear();
			while ((str = reader.readLine()) != null) {
				String s=str.trim();
				String[] numbers = s.split("\t");
				
				if(numbers.length>=2){
					System.out.println(numbers[0]+","+numbers[1]);
					excludeTWNLDNUMBER.put(numbers[0], numbers[1]);	
				}
			}
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally{
			if(reader!=null){
				try {
					reader.close();
				} catch (IOException e) {
				}
			}
		}
	}
	
	public static void CalendarTest(){
		Calendar calendar =Calendar.getInstance();
		calendar.set(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH)+1,0,0,0);
		System.out.println("calendar:"+calendar.getTime());
	}
	
	//簡訊測試   分段
	public static void breakSMSTest(){
		
		String msg = "*環球卡高用量提醒*提醒您本月數據用量上網金額統計至前{{bp}}一小時加部份推估，已約達NT65,000.00，"
				+ "實際用量及使用金額以帳單為準。另您已{{bp}}約定上網金額不設限，感謝您的留意。如需諮詢請電客服*123#。";
		
		int number = 100;
		int length = msg.length();
		byte[] b = msg.getBytes();
		length = b.length;
		int msgN = length/number;
		if(length%number>0)
			msgN += 1;
		String [] sub =new String[msgN];
		
		for(int i=0;i<msgN;i++){
			int last = (i+1)*number;
			if(last>length)
				last=length;
			
			byte[] c=new byte[last-i*number];
			
			System.arraycopy(b, i*number , c, 0, last-i*number);

				sub[i]=new String(c);
	
			sub[i]=msg.substring(i*number,last);
		}
		//String [] sub =msg.split("\\{\\{bp\\}\\}");
		for(String s: sub){
			System.out.println(s);
		}
	}
	
	public void DBTest(){
		
		String param="測試123.33215測次側側側";
		try {
			query();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		/*try {
			updateDB(999,param);
			updateDB(999,null);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
	}
	
	public static void jsmppTest(){
		//狀態測試
		DeliveryReceipt delReceipt = new DeliveryReceipt();
		delReceipt.setFinalStatus(DeliveryReceiptState.ACCEPTD);
		System.out.println(delReceipt.getFinalStatus().value()+1);

	}
	//簡訊發送測試
	public static void sendSMSTest(){
		
		String phone=null;
		String msg=null;
	
		try {
			
			phone="886989235253";	msg="測試";
			
			
			setSMSPostParam(new String(msg.getBytes("big5"),"ISO-8859-1"),phone);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	public static String byteToString1(byte[] source){
		BigInteger number = new BigInteger(1, source);
        String hashtext = number.toString(16);
        // Now we need to zero pad it if you actually want the full 32 chars.
        while (hashtext.length() < 32) {
            hashtext = "0" + hashtext;
        }
        return hashtext;
	}
	public static String byteToString2(byte[] source){
        return new String(Hex.encodeHex(source));
	}
	
	//RSA EncodeTest
	public static String RSAEncode(String source,RSAPublicKey publicKey) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException{
		 //Cipher负责完成加密或解密工作，基于RSA  
        Cipher cipher = Cipher.getInstance("RSA");  
        //根据公钥，对Cipher对象进行初始化  
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);  
        byte[] resultBytes = cipher.doFinal(source.getBytes());  
        
        return byteToString2(resultBytes);  
	}
	//RSA DecodeTest
	public static String RSADecode(String source,RSAPrivateKey  privateKey) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException, DecoderException{
		//Cipher负责完成加密或解密工作，基于RSA  
        Cipher cipher = Cipher.getInstance("RSA");  
        //根据公钥，对Cipher对象进行初始化  
        cipher.init(Cipher.DECRYPT_MODE, privateKey);  
        byte[] resultBytes = cipher.doFinal(Hex.decodeHex(source.toCharArray()));  
        return new String(resultBytes);  
	}
	
	//md5 EncodeTest
	public static String md5Encode(String source) throws NoSuchAlgorithmException{
		String input=source;
		 MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] messageDigest = md.digest(input.getBytes());
        return byteToString1(messageDigest);
	}
	
	//SHA EncodeTest
	public static String SHAEncode(String source) throws NoSuchAlgorithmException{
		MessageDigest md = MessageDigest.getInstance("SHA");  
        byte[] srcBytes = source.getBytes();  
        md.update(srcBytes);  
        byte[] resultBytes = md.digest();
        return byteToString1(resultBytes);  
	}
	
	Connection getConnection()
	  {
		
		/*try
	    {
			//Class.forName("org.postgresql.Driver");
			Class.forName("oracle.jdbc.driver.OracleDriver");
			//Class.forName("com.mysql.jdbc.Driver");
	    }
	    catch (Exception localException)
	    {
	      System.err.println("ERROR: failed to load Informix JDBC driver.");
	      msg = ("ERROR: failed to load Informix JDBC driver." + localException.getMessage());
	      return null;
	    }*/
		
	    Connection localConnection = null;
	    try
	    {
	    	
	      DriverManager.setLoginTimeout(10);
	      //System.Environment.SetEnvironmentVariable("NLS_LANG", "AMERICAN_AMERICA.WE8ISO8859P1");
	      //localConnection = DriverManager.getConnection("jdbc:postgresql://192.168.10.197:5432/smppdb", "smpper", "SmIpp3r");
	      //localConnection = DriverManager.getConnection("jdbc:oracle:thin:@10.42.1.101:1521:S2TBSDEV", "foyadev", "foyadev");
	      //localConnection = DriverManager.getConnection("jdbc:oracle:thin:@10.42.1.80:1521:s2tbs", "s2tbsadm", "s2tbsadm");
	    localConnection = DriverManager.getConnection("jdbc:oracle:thin:@10.42.1.10:1521:orcl", "wacos", "oss");
	      //localConnection = DriverManager.getConnection("jdbc:mysql://192.168.10.199:3306/CRM_DB?characterEncoding=utf8", "crmuser", "crm");
	    }
	    catch (Exception localException)
	    {
	    	localException.printStackTrace();
	      System.err.println("ERROR DB: failed to connect!");
	      msg = ("ERROR DB: failed to connect!" + localException.getMessage());
	    }
	    return localConnection;
	  }
	
	void updateDB(int num,String param) throws UnsupportedEncodingException{
		Connection conn=getConnection();
		if(conn==null){
			System.out.println("connection is null");
			
		}else{

			try {
				
				if(param!=null && !"".equals(param)){
					PreparedStatement pst = conn.prepareStatement("UPDATE HUR_SMS_COMTENT A SET A.COMTENT =? WHERE A.ID=?");
					String pm=new String(param.getBytes("BIG5"),"ISO8859-1");
					pst.setString(1, pm);
					pst.setInt(2, num);
					pst.executeUpdate();
					
					pst.close();
				}

				PreparedStatement pst2 = conn.prepareStatement("select A.comtent from HUR_SMS_COMTENT A WHERE A.ID=?");
				pst2.setInt(1, num);
				ResultSet rs=pst2.executeQuery();
			
				while(rs.next()){
					String rss=rs.getString("comtent");
					rss=new String(rss.getBytes("ISO8859-1"),"BIG5");
					System.out.println(rss);
				}

			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	
		}
	}
	
	@SuppressWarnings("unchecked")
	void query() throws UnsupportedEncodingException{
		Connection conn=getConnection();

		
		//String sql = "SELECT SUBS_NAME FROM CRM_SUBSCRIBERS A WHERE A.SUBS_NAME like to_nchar('%"+name+"%') ";
		String sql=
				"select A.COMPANY_ID,A.NAME,B.CH_NAME,C.HSCODE "
				+ "from MARKETING_DB_COMPANY A,MARKETING_DB_COUNTRY B,MARKETING_DB_DATA C,MARKETING_DB_HSCODE D "
				+ "where A.COMPANY_ID = C.COMPANY_ID and B.CODE = C.COUNTRY and C.HSCODE = D.CODE and rownum=1 ";

		
		if(conn==null){
			System.out.println("connection is null");
			
		}else{

			Statement st = null ;
			ResultSet rs = null ;
			PreparedStatement ps = null ;
			try {

				
				st=conn.createStatement();
				System.out.println("SQL:"+sql);
				rs = st.executeQuery(sql);

				Map<String,Map<String,Object>> map = new HashMap<String,Map<String,Object>>();
				
				while(rs.next()){
					String COMPANY_ID = rs.getString("COMPANY_ID");
					Map<String,Object> map2 = null;
					Set<String> setC = null;
					Set<String> setH = null;
					if(map.containsKey(COMPANY_ID)){
						map2 = map.get(COMPANY_ID);
						setC = (Set<String>) map2.get("setC");
						setH = (Set<String>) map2.get("setH");
					}else{
						map2 = new HashMap<String,Object>();
						setC=new HashSet<String>();
						setH=new HashSet<String>();
					}

					setC.add(rs.getString("CH_NAME"));
					setH.add(rs.getString("HSCODE"));
					map2.put("setC", setC);
					map2.put("setH", setH);
					map2.put("NAME", rs.getString("NAME"));
					map.put(COMPANY_ID, map2);
				}
				
				
				for(String s : map.keySet()){
					String ss = "";
					Set<String> setC = (Set<String>) map.get(s).get("setC");
					Set<String> setH = (Set<String>) map.get(s).get("setH");
					String Name = (String) map.get(s).get("NAME");
					
					ss += s+"\t";
					ss += Name+"\t";
					for(String s2:setC){
						ss += s2+",";
					}
					ss += "\t";
					for(String s2:setH){
						ss += s2+",";
					}

					logger.info(ss);
				}
				
			/*	
				System.out.println(ip.matches("^\\d+\\.\\d+\\.\\d+\\.\\d+$"));
				String [] ips = ip.split("\\.");
				long ipNumber =0L;
				for(int j=0;j<ips.length;j++){
					ipNumber+=Integer.parseInt(ips[j])*Math.pow(256, 3-j);
				}
				System.out.println("ipNumber="+ipNumber);
				
				System.out.println("end");
				
				for(Map<String,Object> m : IPtoMccmncList){
					long startNum = (Long) m.get("START_NUM");
					long EndNum = (Long) m.get("END_NUM");
					
					if(startNum <= ipNumber && ipNumber <= EndNum){
						break;
					}
				}*/

			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}finally{
				try {
					if (ps != null)
						ps.close();

					if (st != null)
						st.close();

					if (rs != null)
						rs.close();

					conn.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			}
			
			
	
		}
	}
	
	 private static String setSMSPostParam(String msg,String phone) throws IOException{
			StringBuffer sb=new StringBuffer ();

			String PhoneNumber=phone,Text=msg,charset="big5",InfoCharCounter=null,PID=null,DCS=null;
			String param =
					"PhoneNumber=+{{PhoneNumber}}&"
					+ "Text={{Text}}&"
					+ "charset={{charset}}&"
					+ "InfoCharCounter={{InfoCharCounter}}&"
					+ "PID={{PID}}&"
					+ "DCS={{DCS}}&"
					+ "Submit=Submit";
			
			if(PhoneNumber==null)PhoneNumber="";
			if(Text==null)Text="";
			if(charset==null)charset="";
			if(InfoCharCounter==null)InfoCharCounter="";
			if(PID==null)PID="";
			if(DCS==null)DCS="";
			param=param.replace("{{PhoneNumber}}",PhoneNumber );
			param=param.replace("{{Text}}",Text );
			param=param.replace("{{charset}}",charset );
			param=param.replace("{{InfoCharCounter}}",InfoCharCounter );
			param=param.replace("{{PID}}",PID );
			param=param.replace("{{DCS}}",DCS );
			
			
			
			return null;
			/*return tool.HttpPost("http://192.168.10.125:8800/Send%20Text%20Message.htm", param,"");*/
		}
	 
	 public static Properties getProperties(){
			Properties result=new Properties();
			
			result.put("log4j.rootCategory", "DEBUG, stdout, FileOutput");
			
			result.put("log4j.appender.stdout", "org.apache.log4j.ConsoleAppender");
			result.put("log4j.appender.stdout.layout", "org.apache.log4j.PatternLayout");
			result.put("log4j.appender.stdout.layout.ConversionPattern", "%d [%5p] (%F:%L) - %m%n");
			
			result.put("log4j.appender.FileOutput", "org.apache.log4j.DailyRollingFileAppender");
			result.put("log4j.appender.FileOutput.layout", "org.apache.log4j.PatternLayout");
			result.put("log4j.appender.FileOutput.layout.ConversionPattern", "%d [%5p] (%F:%L) - %m%n");
			result.put("log4j.appender.FileOutput.DatePattern", "'.'yyyyMMdd");
			result.put("log4j.appender.FileOutput.File", "Ranger.log");
			
			return result;
	}
}
